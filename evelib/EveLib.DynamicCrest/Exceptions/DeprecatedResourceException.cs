// ***********************************************************************
// Assembly         : EveLib.EveCrest
// Author           : Lars Kristian
// Created          : 12-16-2014
//
// Last Modified By : Lars Kristian
// Last Modified On : 12-17-2014
// ***********************************************************************
// <copyright file="DeprecatedResourceException.cs" company="">
//     Copyright (c) . All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Net;
using System.Runtime.Serialization;

namespace eZet.EveLib.DynamicCrest.Exceptions {
    /// <summary>
    ///     Class DeprecatedResourceException.
    /// </summary>
    [Serializable]
    public sealed class DeprecatedResourceException : Exception {
        /// <summary>
        ///     Initializes a new instance of the <see cref="DeprecatedResourceException" /> class.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="response">The response.</param>
        public DeprecatedResourceException(string message, HttpWebResponse response)
            : base(message) {
            Response = response;
        }

        /// <summary>
        ///     The response generated by the deprecated resource
        /// </summary>
        /// <value>The response.</value>
        public HttpWebResponse Response { get; private set; }

        /// <summary>
        ///     When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
        ///     information about the exception.
        /// </summary>
        /// <param name="info">
        ///     The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
        ///     data about the exception being thrown.
        /// </param>
        /// <param name="context">
        ///     The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
        ///     information about the source or destination.
        /// </param>
        public override void GetObjectData(SerializationInfo info, StreamingContext context) {
            base.GetObjectData(info, context);
        }
    }
}